{
  "entries": [
    {
      "id": 1,
      "date": "08/18/2020",
      "concept": "Object Representation of Things",
      "entry": "We turned our fish in hard-coded html and turned them into object data types.",
      "mood": "determined"
    },
    {
      "id": 2,
      "date": "08/19/2020",
      "concept": "Fundamental Workshops",
      "entry": "We learned how to set up components such as data provider, list and html rep.",
      "mood": "happy"
    },
    {
      "id": 3,
      "date": "08/20/2020",
      "concept": "Debugger",
      "entry": "We fixed errors in code with the begugger.",
      "mood": "nervous"
    },
    {
      "id": 4,
      "date": "08/21/2020",
      "concept": "Filtering Source Data into Smaller Arrays",
      "entry": "We rebuilt our dom content after iterating our array for more specific objects.",
      "mood": "determined"
    },
    {
      "id": 5,
      "date": "09/01/2020",
      "concept": "Decoupling",
      "entry": "This was completely new information. It was/is a lot still to digest. The purpose makes sense; the execution I'm still iffy on.",
      "mood": "tired"
    },
    {
      "id": 6,
      "date": "09/02/2020",
      "concept": "JSON server/API",
      "entry": "We learned how to create our own API with Postman.",
      "mood": "happy"
    },
    {
      "id": 7,
      "date": "09/03/2020",
      "concept": ".filter() method",
      "entry": "We learned to filter arrays of objects.",
      "mood": "nervous"
    },
    {
      "concept": "fetching with json",
      "entry": "This is me practicing using a fetch call",
      "date": 1599508065770,
      "mood": "happy",
      "id": 8
    },
    {
      "concept": "ERDs",
      "entry": "Today we watched several videos portraying the importance of separate data structures in databases. We practiced creating ERDs on DB diagram. ",
      "date": 1600287373785,
      "mood": "encouraged",
      "id": 9
    },
    {
      "concept": "One to Many Relationship",
      "entry": "Today we worked out a 1-many relationship within our notes code in Glassdale. Essentially we gave each noteObj a unique ID, so that our database is tracking that ID as opposed to a name. A name could change in the future, but that number will stay the same.",
      "date": 1600379666012,
      "mood": "tired",
      "id": 10
    }
  ]
}